tmp_dir='tmp/'
if (!dir.exists(tmp_dir)){dir.create(tmp_dir,recursive=TRUE)}
in_fn1='data/eqtl.txt'
in_fn2='data/gwas.txt'
d1=fread(in_fn1)
d2=fread(in_fn2)
merged=merge(d1,d2,by=c('rsid','chr','pos'),suffixes=c('1','2'),all=FALSE)
retrieve_vcf=function(merged,tmp_dir){
chr=unique(merged$chr)
chr=gsub('chr','',chr)
if (length(chr)!=1) {
stop('SNPs must be on a single chromosome!')
}
pos_max=max(merged$pos)
pos_min=min(merged$pos)
command=sprintf('tabix -h ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chr%s.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz %s:%s-%s > %s/1000genomes.vcf',chr,chr,pos_min,pos_max,tmp_dir)
print(command)
system(command)
}
retrieve_vcf(merged,tmp_dir)
tabix='/Users/boshliu/Documents/tools/htslib/bin/tabix'
retrieve_vcf=function(merged,tmp_dir){
chr=unique(merged$chr)
chr=gsub('chr','',chr)
if (length(chr)!=1) {
stop('SNPs must be on a single chromosome!')
}
pos_max=max(merged$pos)
pos_min=min(merged$pos)
command=sprintf('%s -h ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chr%s.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz %s:%s-%s > %s/1000genomes.vcf',tabix,chr,chr,pos_min,pos_max,tmp_dir)
print(command)
system(command)
}
retrieve_vcf(merged,tmp_dir)
pos_max=max(merged$pos)
pos_max
pos_min=min(merged$pos)
pos_min
retrieve_vcf=function(merged,tmp_dir){
chr=unique(merged$chr)
chr=gsub('chr','',chr)
if (length(chr)!=1) {
stop('SNPs must be on a single chromosome!')
}
pos_max=max(merged$pos)
pos_min=min(merged$pos)
command=sprintf('%s -h ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chr%s.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz %s:%s-%s | bgzip > %s/1000genomes.vcf.gz',tabix,chr,chr,pos_min,pos_max,tmp_dir)
print(command)
system(command)
}
retrieve_vcf(merged,tmp_dir)
retrieve_vcf=function(merged,tmp_dir){
chr=unique(merged$chr)
chr=gsub('chr','',chr)
if (length(chr)!=1) {
stop('SNPs must be on a single chromosome!')
}
pos_max=max(merged$pos)
pos_min=min(merged$pos)
command=sprintf('%s -h ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chr%s.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz %s:%s-%s | %s > %s/1000genomes.vcf.gz',tabix,chr,chr,pos_min,pos_max,bgzip,tmp_dir)
print(command)
system(command)
}
retrieve_vcf(merged,tmp_dir)
bgzip='/Users/boshliu/Documents/tools/htslib/bin/bgzip'
retrieve_vcf=function(merged,tmp_dir){
chr=unique(merged$chr)
chr=gsub('chr','',chr)
if (length(chr)!=1) {
stop('SNPs must be on a single chromosome!')
}
pos_max=max(merged$pos)
pos_min=min(merged$pos)
command=sprintf('%s -h ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chr%s.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz %s:%s-%s | %s > %s/1000genomes.vcf.gz',tabix,chr,chr,pos_min,pos_max,bgzip,tmp_dir)
print(command)
system(command)
}
retrieve_vcf(merged,tmp_dir)
chr=15
unlink(sprintf('ALL.chr%s.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz.tbi',chr))
chr=unique(merged$chr)
chr
paste0(tmp_dir,'/1000genome.vcf.gz')
ld=calc_LD(merged$rsid,chr,'EUR',tmp_dir,paste0(tmp_dir,'/1000genome.vcf.gz'))
source('locuscompare.R')
ld=calc_LD(merged$rsid,chr,'EUR',tmp_dir,paste0(tmp_dir,'/1000genome.vcf.gz'))
panel='data/integrated_call_samples_v3.20130502.ALL.panel'
ld=calc_LD(merged$rsid,chr,'EUR',tmp_dir,paste0(tmp_dir,'/1000genome.vcf.gz'),panel)
source('locuscompare.R')
ld=calc_LD(merged$rsid,chr,'EUR',tmp_dir,paste0(tmp_dir,'/1000genome.vcf.gz'),panel)
source('locuscompare.R')
ld=calc_LD(merged$rsid,chr,'EUR',tmp_dir,paste0(tmp_dir,'/1000genome.vcf.gz'),panel)
plink='/Users/boshliu/Documents/tools/plink_mac//plink'
ld=calc_LD(merged$rsid,chr,'EUR',tmp_dir,paste0(tmp_dir,'/1000genome.vcf.gz'),panel)
source('locuscompare.R')
ld=calc_LD(merged$rsid,chr,'EUR',tmp_dir,paste0(tmp_dir,'/1000genome.vcf.gz'),panel)
ld=calc_LD(merged$rsid,chr,'EUR',tmp_dir,paste0('/Users/boshliu/Documents/tools/locuscompare/tmp/','/1000genome.vcf.gz'),panel)
ld=calc_LD(merged$rsid,chr,'EUR',tmp_dir,paste0(tmp_dir,'/1000genomes.vcf.gz'),panel)
ld
merged
merged[,c('logp1','logp2'):=list(-log10(pval1),-log10(pval2))]
merged
shiny::runApp()
color=assign_color(merged$rsid,snp,ld)
snp
ld
merged
snp=NULL
if (is.null(snp)){
snp=merged[which.min(pval1+pval2),rsid]
} else {
if(!snp%in%merged$rsid){
stop(sprintf('%s not found in %s',snp,in_fn1))
}
print(sprintf('INFO - %s',snp))
color=assign_color(merged$rsid,snp,ld)
COLOR
color
source('locuscompare.R')
ld=calc_LD(merged$rsid,chr,'EUR',tmp_dir,paste0(tmp_dir,'/1000genomes.vcf.gz'),panel)
color=assign_color(merged$rsid,snp,ld)
shape=assign_shape(merged)
size=assign_size(merged)
shiny::runApp()
ggdraw(p)
shiny::runApp()
merged[1,rsid]
?reactive
shiny::runApp()
source('locuscompare.R')
shiny::runApp()
?renderPlot
shiny::runApp()
?reactiveVal
?reactiveValuesToList
shiny::runApp()
merged
shiny::runApp()
ld
r2_threshold=0.8
merged
shiny::runApp()
?renderPlot
shiny::runApp()
ld
ld_init=data.table(CHR_A=c(),BP_A=c(),SNP_A=c(),CHR_B=c(),BP_B=c(),SNP_B=c(),R2=c())
snp_init
snp_init=merged[which.min(pval1+pval2),rsid]
snp_init
ld_init=data.table(CHR_A=1,BP_A=1,SNP_A=snp_init,CHR_B=1,BP_B=1,SNP_B=snp_init,R2=1)
ld_init
shiny::runApp()
color=rep('blue4',times=length(rsid))
rsid=merged$rsid
color=rep('blue4',times=length(rsid))
color
shiny::runApp()
?tabPanel
shiny::runApp()
?helpText
shiny::runApp()
rm(merged)
shiny::runApp()
?br
shiny::runApp()
sessionInfo
sessionInfo()
install.packages("shiny")
install.packages("shinyapps")
rsconnect::setAccountInfo(name='boxiangliu', token='10D2E02F72BC10D14567E8C1A1E1F258', secret='JbfrKuVUcOlIdJPmDvyH4cJJ2F9OY7bk4TXfftsx')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='boxiangliu', token='10D2E02F72BC10D14567E8C1A1E1F258', secret='JbfrKuVUcOlIdJPmDvyH4cJJ2F9OY7bk4TXfftsx')
?shinyapps::setAccountInfo
shinyapps::setAccountInfo(name='boxiangliu', token='10D2E02F72BC10D14567E8C1A1E1F258', secret='JbfrKuVUcOlIdJPmDvyH4cJJ2F9OY7bk4TXfftsx')
rsconnect::setAccountInfo(name='boxiangliu', token='10D2E02F72BC10D14567E8C1A1E1F258', secret='JbfrKuVUcOlIdJPmDvyH4cJJ2F9OY7bk4TXfftsx')
?rsconnect::setAccountInfo
